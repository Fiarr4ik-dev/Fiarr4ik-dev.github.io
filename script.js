// –≠–ª–µ–º–µ–Ω—Ç—ã
const modeButtons = document.querySelectorAll(".mode-btn");
const clickArea = document.getElementById("clickArea");
const progressValue = document.getElementById("progressValue");
const rankDisplay = document.getElementById("rank");
const progressBar = document.getElementById("progressBar");
const resetBtn = document.getElementById("resetBtn");
const upgradeList = document.getElementById("upgradeList");

const addBtn = document.getElementById("addBtn");
const addForm = document.getElementById("addForm");
const codeInput = document.getElementById("codeInput");
const amountInput = document.getElementById("amountInput");
const confirmAdd = document.getElementById("confirmAdd");

let currentMode = null;

// –†–∞–Ω–≥–∏
const universityRanks = [
    { name: "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", target: 10000 },
    { name: "–°—Ç—É–¥–µ–Ω—Ç", target: 50000 },
    { name: "–ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç", target: 100000 },
    { name: "–ê—Å–ø–∏—Ä–∞–Ω—Ç", target: 300000 },
    { name: "–ù–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", target: 600000 },
    { name: "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", target: 800000 },
    { name: "–õ–µ–≥–µ–Ω–¥–∞ –°–§–£", target: 1000000 }
];

const dormLevels = Array.from({ length: 30 }, (_, i) => ({
    name: `–û–±—â–∞–≥–∞ ‚Ññ ${i + 1}`,
    target: (i + 1) * 1000
}));

// –î–∞–Ω–Ω—ã–µ
const data = {
    university: { clicks: 0, ranks: universityRanks },
    dorm: { clicks: 0, ranks: dormLevels }
};

// –®–∞–±–ª–æ–Ω—ã –∞–ø–≥—Ä–µ–π–¥–æ–≤
const upgradeTemplates = {
    university: [
        { id: "mouse_turbo", name: "üê≠ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –º—ã—à—å", description: "+1 –∫–ª–∏–∫. –£—Å–∫–æ—Ä—è–µ—Ç –Ω–∞—É—á–Ω—ã–µ –∏–∑—ã—Å–∫–∞–Ω–∏—è", price: 500, value: 1, count: 0, type: "click" },
        { id: "keyboard_laser", name: "üíº –ì—Ä–∞–Ω—Ç –æ—Ç –ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏", description: "+5 –∫–ª–∏–∫–æ–≤. –ù–∞—É—á–Ω—ã–π –ø—Ä–æ—Ä—ã–≤!", price: 5000, value: 5, count: 0, type: "click" },
        { id: "super_mouse", name: "üìö –î–æ–∫—Ç–æ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è", description: "+10 –∫–ª–∏–∫–æ–≤. –¢—ã ‚Äî —Å–≤–µ—Ç–∏–ª–æ –Ω–∞—É–∫–∏", price: 50000, value: 10, count: 0, type: "click" },
        { id: "autoclicker", name: "üßë‚Äçüî¨ –ê—Å–ø–∏—Ä–∞–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫", description: "+1 –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫. –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ –µ–¥—É", price: 10000, value: 1, count: 0, type: "auto" }
    ],
    dorm: [
        { id: "mouse_turbo", name: "‚ö° –ß–∞–π–Ω–∏–∫ –Ω–∞ 1500 –í—Ç", description: "+1 –∫–ª–∏–∫. –ö–∏–ø—è—Ç–∏—Ç –∑–∞ 30 —Å–µ–∫", price: 500, value: 1, count: 0, type: "click" },
        { id: "keyboard_laser", name: "üåØ –®–∞—É—Ä–º–∞ —É 5-–π –æ–±—â–∞–≥–∏", description: "+5 –∫–ª–∏–∫–æ–≤. –≠–Ω–µ—Ä–≥–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å", price: 5000, value: 5, count: 0, type: "click" },
        { id: "super_mouse", name: "üì∂ Wi-Fi —Å –ø–∞—Ä–æ–ª—è 12345678", description: "+10 –∫–ª–∏–∫–æ–≤. –õ–æ–≤–∏—Ç –¥–∞–∂–µ –≤ –ø–æ–¥–≤–∞–ª–µ", price: 50000, value: 10, count: 0, type: "click" },
        { id: "autoclicker", name: "üç¨ –°–æ—Å–µ–¥ –ø–æ –∫–æ–º–Ω–∞—Ç–µ", description: "+1 –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫. –ö–ª–∏–∫–∞–µ—Ç –∑–∞ –∫–æ–Ω—Ñ–µ—Ç–∫—É", price: 10000, value: 1, count: 0, type: "auto" }
    ]
};

let upgrades = [];
let clickPower = 1;

// üîê –ö–æ–¥ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏
const CHEAT_CODE = "sfu2025";

// –ó–∞–≥—Ä—É–∑–∫–∞
function loadFromStorage() {
    const savedData = localStorage.getItem("clickerData");
    if (savedData) {
        const parsed = JSON.parse(savedData);
        if (parsed.university?.clicks !== undefined) data.university.clicks = parsed.university.clicks;
        if (parsed.dorm?.clicks !== undefined) data.dorm.clicks = parsed.dorm.clicks;
    }

    const savedUpgrades = localStorage.getItem("upgrades");
    if (savedUpgrades) {
        const parsed = JSON.parse(savedUpgrades);
        ["university", "dorm"].forEach(mode => {
            if (parsed[mode]) {
                Object.keys(parsed[mode]).forEach(id => {
                    const upgrade = upgradeTemplates[mode].find(u => u.id === id);
                    if (upgrade) upgrade.count = parsed[mode][id].count;
                });
            }
        });
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function saveToStorage() {
    localStorage.setItem("clickerData", JSON.stringify({
        university: { clicks: data.university.clicks },
        dorm: { clicks: data.dorm.clicks }
    }));

    const saved = { university: {}, dorm: {} };
    ["university", "dorm"].forEach(mode => {
        upgradeTemplates[mode].forEach(u => {
            saved[mode][u.id] = { count: u.count };
        });
    });
    localStorage.setItem("upgrades", JSON.stringify(saved));
}

// –ü–µ—Ä–µ—Å—á—ë—Ç —Å–∏–ª—ã –∫–ª–∏–∫–∞
function recalculateClickPower() {
    clickPower = 1 + upgrades
        .filter(u => u.type === "click")
        .reduce((sum, u) => sum + u.value * u.count, 0);
}

// –†–µ–Ω–¥–µ—Ä –∞–ø–≥—Ä–µ–π–¥–æ–≤
function renderUpgrades() {
    upgradeList.innerHTML = "";
    upgrades.forEach(upg => {
        const price = Math.floor(upg.price * (1 + upg.count * 0.5));
        const canBuy = data[currentMode].clicks >= price;

        const div = document.createElement("div");
        div.className = "upgrade-item";
        div.innerHTML = `
      <div>
        <strong>${upg.name}</strong> (${upg.count})
        <p class="description">${upg.description}</p>
      </div>
      <button ${canBuy ? "" : "disabled"}>
        –ö—É–ø–∏—Ç—å –∑–∞ ${price}
      </button>
    `;
        div.querySelector("button").addEventListener("click", () => buyUpgrade(upg));
        upgradeList.appendChild(div);
    });
}

// –ü–æ–∫—É–ø–∫–∞
function buyUpgrade(upgrade) {
    const price = Math.floor(upgrade.price * (1 + upgrade.count * 0.5));
    if (data[currentMode].clicks < price) return;

    data[currentMode].clicks -= price;
    upgrade.count++;
    saveToStorage();
    recalculateClickPower();
    updateUI();
    renderUpgrades();
}

// –ö–ª–∏–∫
clickArea.addEventListener("click", () => {
    if (!currentMode) {
        alert("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º: –í–£–ó –∏–ª–∏ –û–±—â–∞–≥–∞");
        return;
    }

    data[currentMode].clicks += clickPower;
    clickArea.classList.add("click-animation");

    setTimeout(() => {
        clickArea.classList.remove("click-animation");
    }, 150);

    saveToStorage();
    updateUI();
    renderUpgrades();
});

// –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
setInterval(() => {
    if (currentMode) {
        upgrades.forEach(u => {
            if (u.type === "auto" && u.count > 0) {
                data[currentMode].clicks += u.value * u.count;
            }
        });
        updateUI();
        renderUpgrades();
        saveToStorage();
    }
}, 2000);

// –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞
function switchMode(mode) {
    currentMode = mode;
    upgrades = JSON.parse(JSON.stringify(upgradeTemplates[mode]));

    const saved = localStorage.getItem("upgrades");
    if (saved) {
        const parsed = JSON.parse(saved);
        if (parsed[mode]) {
            upgrades.forEach(u => {
                if (parsed[mode][u.id]) u.count = parsed[mode][u.id].count;
            });
        }
    }

    recalculateClickPower();

    modeButtons.forEach(btn => {
        btn.classList.remove("active");
        if (btn.dataset.mode === mode) btn.classList.add("active");
    });

    updateUI();
    renderUpgrades();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    if (!currentMode) return;

    const d = data[currentMode];
    const rankList = d.ranks;
    let currentRankIndex = 0;
    let nextTarget = rankList[0].target;

    for (let i = 0; i < rankList.length; i++) {
        if (d.clicks < rankList[i].target) {
            currentRankIndex = i;
            nextTarget = rankList[i].target;
            break;
        }
        if (i === rankList.length - 1) {
            currentRankIndex = i;
            nextTarget = rankList[i].target;
        }
    }

    const currentRank = rankList[currentRankIndex];
    const prevTarget = currentRankIndex === 0 ? 0 : rankList[currentRankIndex - 1].target;
    const progress = nextTarget - prevTarget > 0
        ? ((d.clicks - prevTarget) / (nextTarget - prevTarget)) * 100
        : 100;

    progressValue.textContent = d.clicks;
    rankDisplay.textContent = currentRank.name;
    progressBar.style.width = `${Math.min(progress, 100)}%`;
    progressBar.style.backgroundColor = currentRankIndex === rankList.length - 1 ? "#5ec318" : "#0057A5";
}

// –°–±—Ä–æ—Å
resetBtn.addEventListener("click", () => {
    if (!currentMode) return;
    if (confirm("–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞?")) {
        data[currentMode].clicks = 0;
        saveToStorage();
        updateUI();
        renderUpgrades();
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
modeButtons.forEach(btn => {
    btn.addEventListener("click", () => switchMode(btn.dataset.mode));
});

// –ù–∞–∫—Ä—É—Ç–∫–∞
addBtn.addEventListener("click", () => {
    addForm.style.display = addForm.style.display === "none" ? "block" : "none";
    codeInput.value = "";
    amountInput.value = "";
});

confirmAdd.addEventListener("click", () => {
    const code = codeInput.value.trim();
    const amount = parseInt(amountInput.value);

    if (!code || !amount || amount <= 0) {
        alert("–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è!");
        return;
    }

    if (code !== CHEAT_CODE) {
        alert("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!");
        return;
    }

    data[currentMode].clicks += amount;
    saveToStorage();
    updateUI();
    renderUpgrades();
    alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∫–ª–∏–∫–æ–≤!`);
    addForm.style.display = "none";
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadFromStorage();
switchMode("university");