// –≠–ª–µ–º–µ–Ω—Ç—ã
const menuTrigger = document.getElementById("menuTrigger");
const dropdownMenu = document.getElementById("dropdownMenu");
const menuItems = document.querySelectorAll(".menu-item");
const clickArea = document.getElementById("clickArea");
const progressValue = document.getElementById("progressValue");
const rankDisplay = document.getElementById("rank");
const progressBar = document.getElementById("progressBar");
const resetBtn = document.getElementById("resetBtn");

// –†–µ–∂–∏–º: university –∏–ª–∏ dorm
let currentMode = null;

// –†–∞–Ω–≥–∏ –í–£–ó–∞
const universityRanks = [
    { name: "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", target: 10 },
    { name: "–°—Ç—É–¥–µ–Ω—Ç", target: 50 },
    { name: "–ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç", target: 100 },
    { name: "–ê—Å–ø–∏—Ä–∞–Ω—Ç", target: 300 },
    { name: "–ù–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", target: 600 },
    { name: "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", target: 800 },
    { name: "–õ–µ–≥–µ–Ω–¥–∞ –°–§–£", target: 1000 }
];

// –£—Ä–æ–≤–Ω–∏ –æ–±—â–∞–≥–∏ ‚Äî –æ—Ç 1 –¥–æ 30
const dormLevels = Array.from({ length: 30 }, (_, i) => ({
    name: `–û–±—â–∞–≥–∞ ‚Ññ ${i + 1}`,
    target: (i + 1) * 10  // 10, 20, 30, ..., 300
}));

// –î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∂–∏–º–∞–º
const data = {
    university: { clicks: 0, ranks: universityRanks },
    dorm: { clicks: 0, ranks: dormLevels }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadFromStorage() {
    const saved = localStorage.getItem("clickerData");
    if (saved) {
        const parsed = JSON.parse(saved);
        if (parsed.university?.clicks !== undefined) data.university.clicks = parsed.university.clicks;
        if (parsed.dorm?.clicks !== undefined) data.dorm.clicks = parsed.dorm.clicks;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function saveToStorage() {
    localStorage.setItem("clickerData", JSON.stringify({
        university: { clicks: data.university.clicks },
        dorm: { clicks: data.dorm.clicks }
    }));
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞
function setMode(mode) {
    currentMode = mode;
    menuTrigger.textContent = mode === "university" ? "üéì –í–£–ó" : "üõèÔ∏è –û–±—â–∞–≥–∞";
    dropdownMenu.style.display = "none";
    updateUI();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    const d = data[currentMode];
    const rankList = d.ranks;
    let currentRankIndex = 0;
    let nextTarget = rankList[0].target;

    for (let i = 0; i < rankList.length; i++) {
        if (d.clicks < rankList[i].target) {
            currentRankIndex = i;
            nextTarget = rankList[i].target;
            break;
        }
        if (i === rankList.length - 1) {
            currentRankIndex = i;
            nextTarget = rankList[i].target;
        }
    }

    const currentRank = rankList[currentRankIndex];
    const prevTarget = currentRankIndex === 0 ? 0 : rankList[currentRankIndex - 1].target;
    const progress = nextTarget - prevTarget > 0
        ? ((d.clicks - prevTarget) / (nextTarget - prevTarget)) * 100
        : 100;

    progressValue.textContent = d.clicks;
    rankDisplay.textContent = currentRank.name;
    progressBar.style.width = `${Math.min(progress, 100)}%`;

    // –¶–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ ‚Äî –∑–æ–ª–æ—Ç–æ–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ
    if (currentRankIndex === rankList.length - 1) {
        progressBar.style.backgroundColor = "#d4af37";
    } else {
        progressBar.style.backgroundColor = "#0057A5";
    }
}

// –ö–ª–∏–∫!
clickArea.addEventListener("click", () => {
    if (!currentMode) {
        alert("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º: –í–£–ó –∏–ª–∏ –û–±—â–∞–≥–∞");
        return;
    }

    data[currentMode].clicks++;
    clickArea.classList.add("click-animation");

    setTimeout(() => {
        clickArea.classList.remove("click-animation");
    }, 150);

    saveToStorage();
    updateUI();
});

// –°–±—Ä–æ—Å
resetBtn.addEventListener("click", () => {
    if (!currentMode) return;
    if (confirm("–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞?")) {
        data[currentMode].clicks = 0;
        saveToStorage();
        updateUI();
    }
});

// –ú–µ–Ω—é
menuTrigger.addEventListener("click", () => {
    dropdownMenu.style.display = dropdownMenu.style.display === "block" ? "none" : "block";
});

menuItems.forEach(item => {
    item.addEventListener("click", () => {
        setMode(item.dataset.mode);
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
document.addEventListener("click", (e) => {
    if (!menuTrigger.contains(e.target) && !dropdownMenu.contains(e.target)) {
        dropdownMenu.style.display = "none";
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadFromStorage();
updateUI();